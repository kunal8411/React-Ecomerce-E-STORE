{"ast":null,"code":"var _jsxFileName = \"/home/kunal/Kunal/THEMES/theme/src/components/advance/imageCropper.js\";\nimport React, { Fragment, useState, useRef, useCallback } from 'react';\nimport Breadcrumb from '../common/breadcrumb';\nimport ReactCrop from \"react-image-crop\";\nimport { ImageCropper } from '../../constant';\n\nconst ImageCroppers = () => {\n  const [upImg, setUpImg] = useState();\n  const imgRef = useRef(null);\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 30,\n    aspect: 16 / 9\n  });\n  const [previewUrl, setPreviewUrl] = useState();\n\n  const onSelectFile = e => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () => setUpImg(reader.result));\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n\n  const makeClientCrop = async crop => {\n    if (imgRef.current && crop.width && crop.height) {\n      createCropPreview(imgRef.current, crop, 'newFile.jpeg');\n    }\n  };\n\n  const createCropPreview = async (image, crop, fileName) => {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          reject(new Error('Canvas is empty'));\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(previewUrl);\n        setPreviewUrl(window.URL.createObjectURL(blob));\n      }, 'image/jpeg');\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Breadcrumb, {\n    title: \"Image Cropper\",\n    parent: \"Advance\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, ImageCropper)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-cropper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    onChange: onSelectFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(ReactCrop, {\n    src: upImg,\n    onImageLoaded: onLoad,\n    crop: crop,\n    onChange: c => setCrop(c),\n    onComplete: makeClientCrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 25\n    }\n  }), previewUrl && /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Crop preview\",\n    src: previewUrl,\n    style: {\n      maxWidth: \"100%\"\n    },\n    className: \"crop-portion\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 40\n    }\n  })))));\n};\n\nexport default ImageCroppers;","map":{"version":3,"sources":["/home/kunal/Kunal/THEMES/theme/src/components/advance/imageCropper.js"],"names":["React","Fragment","useState","useRef","useCallback","Breadcrumb","ReactCrop","ImageCropper","ImageCroppers","upImg","setUpImg","imgRef","crop","setCrop","unit","width","aspect","previewUrl","setPreviewUrl","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onLoad","img","current","makeClientCrop","height","createCropPreview","image","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","Error","name","window","URL","revokeObjectURL","createObjectURL","c","maxWidth"],"mappings":"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","sourcesContent":["import React, { Fragment,useState,useRef,useCallback } from 'react';\nimport Breadcrumb from '../common/breadcrumb';\nimport ReactCrop from \"react-image-crop\";\nimport {ImageCropper} from '../../constant'\n\nconst ImageCroppers =  () => {\n    const [upImg, setUpImg] = useState();\n    const imgRef = useRef(null);\n    const [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 16 / 9 });\n    const [previewUrl, setPreviewUrl] = useState();\n\n    const onSelectFile = e => {\n        if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => setUpImg(reader.result));\n        reader.readAsDataURL(e.target.files[0]);\n        }\n    };\n\n    const onLoad = useCallback(img => {\n        imgRef.current = img;\n    }, []);\n\n    const makeClientCrop = async crop => {\n        if (imgRef.current && crop.width && crop.height) {\n        createCropPreview(imgRef.current, crop, 'newFile.jpeg');\n        }\n    };\n\n    const createCropPreview = async (image, crop, fileName) => {\n        const canvas = document.createElement('canvas');\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext('2d');\n\n        ctx.drawImage(\n        image,\n        crop.x * scaleX,\n        crop.y * scaleY,\n        crop.width * scaleX,\n        crop.height * scaleY,\n        0,\n        0,\n        crop.width,\n        crop.height\n        );\n\n        return new Promise((resolve, reject) => {\n        canvas.toBlob(blob => {\n            if (!blob) {\n            reject(new Error('Canvas is empty'));\n            return;\n            }\n            blob.name = fileName;\n            window.URL.revokeObjectURL(previewUrl);\n            setPreviewUrl(window.URL.createObjectURL(blob));\n        }, 'image/jpeg');\n        });\n    };\n\n    return (\n        <Fragment>\n            <Breadcrumb title=\"Image Cropper\" parent=\"Advance\" />\n\n            <div className=\"container-fluid\">\n                <div className=\"card\">\n                    <div className=\"card-header\">\n                        <h5>{ImageCropper}</h5>\n                    </div>\n                    <div className=\"card-body\">\n                        <div className=\"input-cropper\">\n                            <input type=\"file\" onChange={onSelectFile} />\n                        </div>\n                        <ReactCrop\n                            src={upImg}\n                            onImageLoaded={onLoad}\n                            crop={crop}\n                            onChange={c => setCrop(c)}\n                            onComplete={makeClientCrop}\n                        />\n                        {previewUrl && <img alt=\"Crop preview\" src={previewUrl}  style={{ maxWidth: \"100%\" }}  className=\"crop-portion\"  />}\n                    </div>\n                </div>\n            </div>\n\n        </Fragment>\n    );\n}\n\nexport default ImageCroppers;"]},"metadata":{},"sourceType":"module"}