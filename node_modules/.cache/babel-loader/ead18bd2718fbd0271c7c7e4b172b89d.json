{"ast":null,"code":"import { ADD_COSTOMIZER, ADD_LAYOUT, ADD_SIDEBAR_TYPES, ADD_SIDEBAR_SETTINGS, ADD_COLOR, ADD_MIXlAYOUT } from \"../../redux/actionTypes\";\nimport ConfigDB from '../../data/customizer/config';\nconst initial_state = {\n  customizer: ConfigDB.data,\n  configData: {},\n  layout: 'ltr',\n  sidebar_types: {},\n  settings: '',\n  color: {},\n  mix_layout: ''\n};\nexport default ((state = initial_state, action) => {\n  switch (action.type) {\n    case ADD_COSTOMIZER:\n      return { ...state,\n        loading: false,\n        customizer: ConfigDB.data\n      };\n\n    case ADD_LAYOUT:\n      state.customizer.settings.layout_type = action.payload;\n      const layoutUpdate = state.customizer.settings.layout_type;\n      return { ...state,\n        loading: true,\n        layout: layoutUpdate\n      };\n\n    case ADD_SIDEBAR_TYPES:\n      state.customizer.settings.sidebar = action.payload;\n      const sidebarTypeUpdate = state.customizer.settings.sidebar;\n      return { ...state,\n        loading: true,\n        sidebar_types: sidebarTypeUpdate\n      };\n\n    case ADD_SIDEBAR_SETTINGS:\n      state.customizer.settings.sidebar_setting = action.payload;\n      const settingsUpdate = state.customizer.settings.sidebar_setting;\n      return { ...state,\n        loading: true,\n        settings: settingsUpdate\n      };\n\n    case ADD_COLOR:\n      const colors = action.payload;\n      state.customizer.color.primary_color = colors.primary_color;\n      state.customizer.color.secondary_color = colors.secondary_color;\n      state.customizer.color.color = colors.color;\n      state.customizer.color.layout_version = colors.layout_version;\n      return { ...state,\n        color: colors,\n        loading: true\n      };\n\n    case ADD_MIXlAYOUT:\n      const mix_layout = action.payload;\n      state.customizer.color.mix_layout = mix_layout;\n      return { ...state,\n        mix_layout: mix_layout,\n        loading: true\n      };\n\n    default:\n      return { ...state\n      };\n  }\n});","map":{"version":3,"sources":["/home/kunal/Kunal/THEMES/theme/src/redux/customizer/reducer.js"],"names":["ADD_COSTOMIZER","ADD_LAYOUT","ADD_SIDEBAR_TYPES","ADD_SIDEBAR_SETTINGS","ADD_COLOR","ADD_MIXlAYOUT","ConfigDB","initial_state","customizer","data","configData","layout","sidebar_types","settings","color","mix_layout","state","action","type","loading","layout_type","payload","layoutUpdate","sidebar","sidebarTypeUpdate","sidebar_setting","settingsUpdate","colors","primary_color","secondary_color","layout_version"],"mappings":"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","sourcesContent":["import { ADD_COSTOMIZER, ADD_LAYOUT, ADD_SIDEBAR_TYPES, ADD_SIDEBAR_SETTINGS, ADD_COLOR, ADD_MIXlAYOUT } from \"../../redux/actionTypes\";\nimport ConfigDB from '../../data/customizer/config';\n\nconst initial_state = {\n    customizer: ConfigDB.data,\n    configData: {},\n    layout: 'ltr',\n    sidebar_types: {},\n    settings: '',\n    color: {},\n    mix_layout: ''\n};\n\nexport default (state = initial_state, action) => {\n    switch (action.type) {\n\n        case ADD_COSTOMIZER:\n            return { ...state, loading: false, customizer: ConfigDB.data };\n\n        case ADD_LAYOUT:\n            state.customizer.settings.layout_type = action.payload\n            const layoutUpdate = state.customizer.settings.layout_type;\n            return { ...state, loading: true, layout: layoutUpdate };\n\n        case ADD_SIDEBAR_TYPES:\n            state.customizer.settings.sidebar = action.payload\n            const sidebarTypeUpdate = state.customizer.settings.sidebar;\n\n            return { ...state, loading: true, sidebar_types: sidebarTypeUpdate };\n\n        case ADD_SIDEBAR_SETTINGS:\n            state.customizer.settings.sidebar_setting = action.payload\n            const settingsUpdate = state.customizer.settings.sidebar_setting;\n            return { ...state, loading: true, settings: settingsUpdate };\n\n        case ADD_COLOR:\n            const colors = action.payload;\n            state.customizer.color.primary_color = colors.primary_color;\n            state.customizer.color.secondary_color = colors.secondary_color;\n            state.customizer.color.color = colors.color;\n            state.customizer.color.layout_version = colors.layout_version;\n            return { ...state, color: colors, loading: true };\n\n        case ADD_MIXlAYOUT:\n            const mix_layout = action.payload\n            state.customizer.color.mix_layout = mix_layout;\n            return { ...state, mix_layout: mix_layout, loading: true };\n\n        default: return { ...state };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}