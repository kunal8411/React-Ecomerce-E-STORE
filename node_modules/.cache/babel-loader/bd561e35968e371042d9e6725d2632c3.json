{"ast":null,"code":"/**!\n * is\n * the definitive JavaScript type testing library\n * \n * @copyright 2013 Enrico Marino\n * @license MIT\n */\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toString = objProto.toString;\n\nvar isActualNaN = function (value) {\n  return value !== value;\n};\n\nvar NON_HOST_TYPES = {\n  \"boolean\": 1,\n  \"number\": 1,\n  \"string\": 1,\n  \"undefined\": 1\n};\n/**\n * Expose `is`\n */\n\nvar is = module.exports = {};\n/**\n * Test general.\n */\n\n/**\n * is.type\n * Test if `value` is a type of `type`.\n *\n * @param {Mixed} value value to test\n * @param {String} type type\n * @return {Boolean} true if `value` is a type of `type`, false otherwise\n * @api public\n */\n\nis.a = is.type = function (value, type) {\n  return typeof value === type;\n};\n/**\n * is.defined\n * Test if `value` is defined.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if 'value' is defined, false otherwise\n * @api public\n */\n\n\nis.defined = function (value) {\n  return value !== undefined;\n};\n/**\n * is.empty\n * Test if `value` is empty.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is empty, false otherwise\n * @api public\n */\n\n\nis.empty = function (value) {\n  var type = toString.call(value);\n  var key;\n\n  if ('[object Array]' === type || '[object Arguments]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) if (owns.call(value, key)) return false;\n\n    return true;\n  }\n\n  if ('[object String]' === type) {\n    return '' === value;\n  }\n\n  return false;\n};\n/**\n * is.equal\n * Test if `value` is equal to `other`.\n *\n * @param {Mixed} value value to test\n * @param {Mixed} other value to compare with\n * @return {Boolean} true if `value` is equal to `other`, false otherwise\n */\n\n\nis.equal = function (value, other) {\n  var type = toString.call(value);\n  var key;\n\n  if (type !== toString.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if ('[object Array]' === type) {\n    key = value.length;\n\n    if (key !== other.length) {\n      return false;\n    }\n\n    while (--key) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  }\n\n  if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return value === other;\n};\n/**\n * is.hosted\n * Test if `value` is hosted by `host`.\n *\n * @param {Mixed} value to test\n * @param {Mixed} host host to test with\n * @return {Boolean} true if `value` is hosted by `host`, false otherwise\n * @api public\n */\n\n\nis.hosted = function (value, host) {\n  var type = typeof host[value];\n  return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type];\n};\n/**\n * is.instance\n * Test if `value` is an instance of `constructor`.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an instance of `constructor`\n * @api public\n */\n\n\nis.instance = is['instanceof'] = function (value, constructor) {\n  return value instanceof constructor;\n};\n/**\n * is.null\n * Test if `value` is null.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is null, false otherwise\n * @api public\n */\n\n\nis['null'] = function (value) {\n  return value === null;\n};\n/**\n * is.undefined\n * Test if `value` is undefined.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is undefined, false otherwise\n * @api public\n */\n\n\nis.undefined = function (value) {\n  return value === undefined;\n};\n/**\n * Test arguments.\n */\n\n/**\n * is.arguments\n * Test if `value` is an arguments object.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */\n\n\nis.arguments = function (value) {\n  var isStandardArguments = '[object Arguments]' === toString.call(value);\n  var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);\n  return isStandardArguments || isOldArguments;\n};\n/**\n * Test array.\n */\n\n/**\n * is.array\n * Test if 'value' is an array.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an array, false otherwise\n * @api public\n */\n\n\nis.array = function (value) {\n  return '[object Array]' === toString.call(value);\n};\n/**\n * is.arguments.empty\n * Test if `value` is an empty arguments object.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an empty arguments object, false otherwise\n * @api public\n */\n\n\nis.arguments.empty = function (value) {\n  return is.arguments(value) && value.length === 0;\n};\n/**\n * is.array.empty\n * Test if `value` is an empty array.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an empty array, false otherwise\n * @api public\n */\n\n\nis.array.empty = function (value) {\n  return is.array(value) && value.length === 0;\n};\n/**\n * is.arraylike\n * Test if `value` is an arraylike object.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */\n\n\nis.arraylike = function (value) {\n  return !!value && !is.boolean(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n/**\n * Test boolean.\n */\n\n/**\n * is.boolean\n * Test if `value` is a boolean.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a boolean, false otherwise\n * @api public\n */\n\n\nis.boolean = function (value) {\n  return '[object Boolean]' === toString.call(value);\n};\n/**\n * is.false\n * Test if `value` is false.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is false, false otherwise\n * @api public\n */\n\n\nis['false'] = function (value) {\n  return is.boolean(value) && (value === false || value.valueOf() === false);\n};\n/**\n * is.true\n * Test if `value` is true.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is true, false otherwise\n * @api public\n */\n\n\nis['true'] = function (value) {\n  return is.boolean(value) && (value === true || value.valueOf() === true);\n};\n/**\n * Test date.\n */\n\n/**\n * is.date\n * Test if `value` is a date.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a date, false otherwise\n * @api public\n */\n\n\nis.date = function (value) {\n  return '[object Date]' === toString.call(value);\n};\n/**\n * Test element.\n */\n\n/**\n * is.element\n * Test if `value` is an html element.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an HTML Element, false otherwise\n * @api public\n */\n\n\nis.element = function (value) {\n  return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1;\n};\n/**\n * Test error.\n */\n\n/**\n * is.error\n * Test if `value` is an error object.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an error object, false otherwise\n * @api public\n */\n\n\nis.error = function (value) {\n  return '[object Error]' === toString.call(value);\n};\n/**\n * Test function.\n */\n\n/**\n * is.fn / is.function (deprecated)\n * Test if `value` is a function.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a function, false otherwise\n * @api public\n */\n\n\nis.fn = is['function'] = function (value) {\n  var isAlert = typeof window !== 'undefined' && value === window.alert;\n  return isAlert || '[object Function]' === toString.call(value);\n};\n/**\n * Test number.\n */\n\n/**\n * is.number\n * Test if `value` is a number.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a number, false otherwise\n * @api public\n */\n\n\nis.number = function (value) {\n  return '[object Number]' === toString.call(value);\n};\n/**\n * is.infinite\n * Test if `value` is positive or negative infinity.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise\n * @api public\n */\n\n\nis.infinite = function (value) {\n  return value === Infinity || value === -Infinity;\n};\n/**\n * is.decimal\n * Test if `value` is a decimal number.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a decimal number, false otherwise\n * @api public\n */\n\n\nis.decimal = function (value) {\n  return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0;\n};\n/**\n * is.divisibleBy\n * Test if `value` is divisible by `n`.\n *\n * @param {Number} value value to test\n * @param {Number} n dividend\n * @return {Boolean} true if `value` is divisible by `n`, false otherwise\n * @api public\n */\n\n\nis.divisibleBy = function (value, n) {\n  var isDividendInfinite = is.infinite(value);\n  var isDivisorInfinite = is.infinite(n);\n  var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;\n  return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0;\n};\n/**\n * is.int\n * Test if `value` is an integer.\n *\n * @param value to test\n * @return {Boolean} true if `value` is an integer, false otherwise\n * @api public\n */\n\n\nis.int = function (value) {\n  return is.number(value) && !isActualNaN(value) && value % 1 === 0;\n};\n/**\n * is.maximum\n * Test if `value` is greater than 'others' values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is greater than `others` values\n * @api public\n */\n\n\nis.maximum = function (value, others) {\n  if (isActualNaN(value)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.arraylike(others)) {\n    throw new TypeError('second argument must be array-like');\n  }\n\n  var len = others.length;\n\n  while (--len >= 0) {\n    if (value < others[len]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * is.minimum\n * Test if `value` is less than `others` values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is less than `others` values\n * @api public\n */\n\n\nis.minimum = function (value, others) {\n  if (isActualNaN(value)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.arraylike(others)) {\n    throw new TypeError('second argument must be array-like');\n  }\n\n  var len = others.length;\n\n  while (--len >= 0) {\n    if (value > others[len]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * is.nan\n * Test if `value` is not a number.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is not a number, false otherwise\n * @api public\n */\n\n\nis.nan = function (value) {\n  return !is.number(value) || value !== value;\n};\n/**\n * is.even\n * Test if `value` is an even number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an even number, false otherwise\n * @api public\n */\n\n\nis.even = function (value) {\n  return is.infinite(value) || is.number(value) && value === value && value % 2 === 0;\n};\n/**\n * is.odd\n * Test if `value` is an odd number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an odd number, false otherwise\n * @api public\n */\n\n\nis.odd = function (value) {\n  return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0;\n};\n/**\n * is.ge\n * Test if `value` is greater than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */\n\n\nis.ge = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n\n  return !is.infinite(value) && !is.infinite(other) && value >= other;\n};\n/**\n * is.gt\n * Test if `value` is greater than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */\n\n\nis.gt = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n\n  return !is.infinite(value) && !is.infinite(other) && value > other;\n};\n/**\n * is.le\n * Test if `value` is less than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if 'value' is less than or equal to 'other'\n * @api public\n */\n\n\nis.le = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n\n  return !is.infinite(value) && !is.infinite(other) && value <= other;\n};\n/**\n * is.lt\n * Test if `value` is less than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if `value` is less than `other`\n * @api public\n */\n\n\nis.lt = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n\n  return !is.infinite(value) && !is.infinite(other) && value < other;\n};\n/**\n * is.within\n * Test if `value` is within `start` and `finish`.\n *\n * @param {Number} value value to test\n * @param {Number} start lower bound\n * @param {Number} finish upper bound\n * @return {Boolean} true if 'value' is is within 'start' and 'finish'\n * @api public\n */\n\n\nis.within = function (value, start, finish) {\n  if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {\n    throw new TypeError('all arguments must be numbers');\n  }\n\n  var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);\n  return isAnyInfinite || value >= start && value <= finish;\n};\n/**\n * Test object.\n */\n\n/**\n * is.object\n * Test if `value` is an object.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an object, false otherwise\n * @api public\n */\n\n\nis.object = function (value) {\n  return value && '[object Object]' === toString.call(value);\n};\n/**\n * is.hash\n * Test if `value` is a hash - a plain object literal.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a hash, false otherwise\n * @api public\n */\n\n\nis.hash = function (value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval;\n};\n/**\n * Test regexp.\n */\n\n/**\n * is.regexp\n * Test if `value` is a regular expression.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a regexp, false otherwise\n * @api public\n */\n\n\nis.regexp = function (value) {\n  return '[object RegExp]' === toString.call(value);\n};\n/**\n * Test string.\n */\n\n/**\n * is.string\n * Test if `value` is a string.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if 'value' is a string, false otherwise\n * @api public\n */\n\n\nis.string = function (value) {\n  return '[object String]' === toString.call(value);\n};","map":{"version":3,"sources":["/home/kunal/Kunal/THEMES/theme/node_modules/is/index.js"],"names":["objProto","Object","prototype","owns","hasOwnProperty","toString","isActualNaN","value","NON_HOST_TYPES","is","module","exports","a","type","defined","undefined","empty","call","key","length","equal","other","getTime","hosted","host","instance","constructor","arguments","isStandardArguments","isOldArguments","array","arraylike","object","fn","callee","boolean","isFinite","number","valueOf","date","element","HTMLElement","nodeType","error","isAlert","window","alert","infinite","Infinity","decimal","divisibleBy","n","isDividendInfinite","isDivisorInfinite","isNonZeroNumber","int","maximum","others","TypeError","len","minimum","nan","even","odd","ge","gt","le","lt","within","start","finish","isAnyInfinite","hash","setInterval","regexp","string"],"mappings":"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","sourcesContent":["\n/**!\n * is\n * the definitive JavaScript type testing library\n * \n * @copyright 2013 Enrico Marino\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toString = objProto.toString;\nvar isActualNaN = function (value) {\n  return value !== value;\n};\nvar NON_HOST_TYPES = {\n  \"boolean\": 1,\n  \"number\": 1,\n  \"string\": 1,\n  \"undefined\": 1\n};\n\n/**\n * Expose `is`\n */\n\nvar is = module.exports = {};\n\n/**\n * Test general.\n */\n\n/**\n * is.type\n * Test if `value` is a type of `type`.\n *\n * @param {Mixed} value value to test\n * @param {String} type type\n * @return {Boolean} true if `value` is a type of `type`, false otherwise\n * @api public\n */\n\nis.a =\nis.type = function (value, type) {\n  return typeof value === type;\n};\n\n/**\n * is.defined\n * Test if `value` is defined.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if 'value' is defined, false otherwise\n * @api public\n */\n\nis.defined = function (value) {\n  return value !== undefined;\n};\n\n/**\n * is.empty\n * Test if `value` is empty.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is empty, false otherwise\n * @api public\n */\n\nis.empty = function (value) {\n  var type = toString.call(value);\n  var key;\n\n  if ('[object Array]' === type || '[object Arguments]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) if (owns.call(value, key)) return false;\n    return true;\n  }\n\n  if ('[object String]' === type) {\n    return '' === value;\n  }\n\n  return false;\n};\n\n/**\n * is.equal\n * Test if `value` is equal to `other`.\n *\n * @param {Mixed} value value to test\n * @param {Mixed} other value to compare with\n * @return {Boolean} true if `value` is equal to `other`, false otherwise\n */\n\nis.equal = function (value, other) {\n  var type = toString.call(value)\n  var key;\n\n  if (type !== toString.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Array]' === type) {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (--key) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  }\n\n  if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return value === other;\n};\n\n/**\n * is.hosted\n * Test if `value` is hosted by `host`.\n *\n * @param {Mixed} value to test\n * @param {Mixed} host host to test with\n * @return {Boolean} true if `value` is hosted by `host`, false otherwise\n * @api public\n */\n\nis.hosted = function (value, host) {\n  var type = typeof host[value];\n  return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type];\n};\n\n/**\n * is.instance\n * Test if `value` is an instance of `constructor`.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an instance of `constructor`\n * @api public\n */\n\nis.instance = is['instanceof'] = function (value, constructor) {\n  return value instanceof constructor;\n};\n\n/**\n * is.null\n * Test if `value` is null.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is null, false otherwise\n * @api public\n */\n\nis['null'] = function (value) {\n  return value === null;\n};\n\n/**\n * is.undefined\n * Test if `value` is undefined.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is undefined, false otherwise\n * @api public\n */\n\nis.undefined = function (value) {\n  return value === undefined;\n};\n\n/**\n * Test arguments.\n */\n\n/**\n * is.arguments\n * Test if `value` is an arguments object.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */\n\nis.arguments = function (value) {\n  var isStandardArguments = '[object Arguments]' === toString.call(value);\n  var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);\n  return isStandardArguments || isOldArguments;\n};\n\n/**\n * Test array.\n */\n\n/**\n * is.array\n * Test if 'value' is an array.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an array, false otherwise\n * @api public\n */\n\nis.array = function (value) {\n  return '[object Array]' === toString.call(value);\n};\n\n/**\n * is.arguments.empty\n * Test if `value` is an empty arguments object.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an empty arguments object, false otherwise\n * @api public\n */\nis.arguments.empty = function (value) {\n  return is.arguments(value) && value.length === 0;\n};\n\n/**\n * is.array.empty\n * Test if `value` is an empty array.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an empty array, false otherwise\n * @api public\n */\nis.array.empty = function (value) {\n  return is.array(value) && value.length === 0;\n};\n\n/**\n * is.arraylike\n * Test if `value` is an arraylike object.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */\n\nis.arraylike = function (value) {\n  return !!value && !is.boolean(value)\n    && owns.call(value, 'length')\n    && isFinite(value.length)\n    && is.number(value.length)\n    && value.length >= 0;\n};\n\n/**\n * Test boolean.\n */\n\n/**\n * is.boolean\n * Test if `value` is a boolean.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a boolean, false otherwise\n * @api public\n */\n\nis.boolean = function (value) {\n  return '[object Boolean]' === toString.call(value);\n};\n\n/**\n * is.false\n * Test if `value` is false.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is false, false otherwise\n * @api public\n */\n\nis['false'] = function (value) {\n  return is.boolean(value) && (value === false || value.valueOf() === false);\n};\n\n/**\n * is.true\n * Test if `value` is true.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is true, false otherwise\n * @api public\n */\n\nis['true'] = function (value) {\n  return is.boolean(value) && (value === true || value.valueOf() === true);\n};\n\n/**\n * Test date.\n */\n\n/**\n * is.date\n * Test if `value` is a date.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a date, false otherwise\n * @api public\n */\n\nis.date = function (value) {\n  return '[object Date]' === toString.call(value);\n};\n\n/**\n * Test element.\n */\n\n/**\n * is.element\n * Test if `value` is an html element.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an HTML Element, false otherwise\n * @api public\n */\n\nis.element = function (value) {\n  return value !== undefined\n    && typeof HTMLElement !== 'undefined'\n    && value instanceof HTMLElement\n    && value.nodeType === 1;\n};\n\n/**\n * Test error.\n */\n\n/**\n * is.error\n * Test if `value` is an error object.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an error object, false otherwise\n * @api public\n */\n\nis.error = function (value) {\n  return '[object Error]' === toString.call(value);\n};\n\n/**\n * Test function.\n */\n\n/**\n * is.fn / is.function (deprecated)\n * Test if `value` is a function.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a function, false otherwise\n * @api public\n */\n\nis.fn = is['function'] = function (value) {\n  var isAlert = typeof window !== 'undefined' && value === window.alert;\n  return isAlert || '[object Function]' === toString.call(value);\n};\n\n/**\n * Test number.\n */\n\n/**\n * is.number\n * Test if `value` is a number.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a number, false otherwise\n * @api public\n */\n\nis.number = function (value) {\n  return '[object Number]' === toString.call(value);\n};\n\n/**\n * is.infinite\n * Test if `value` is positive or negative infinity.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise\n * @api public\n */\nis.infinite = function (value) {\n  return value === Infinity || value === -Infinity;\n};\n\n/**\n * is.decimal\n * Test if `value` is a decimal number.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a decimal number, false otherwise\n * @api public\n */\n\nis.decimal = function (value) {\n  return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0;\n};\n\n/**\n * is.divisibleBy\n * Test if `value` is divisible by `n`.\n *\n * @param {Number} value value to test\n * @param {Number} n dividend\n * @return {Boolean} true if `value` is divisible by `n`, false otherwise\n * @api public\n */\n\nis.divisibleBy = function (value, n) {\n  var isDividendInfinite = is.infinite(value);\n  var isDivisorInfinite = is.infinite(n);\n  var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;\n  return isDividendInfinite || isDivisorInfinite || (isNonZeroNumber && value % n === 0);\n};\n\n/**\n * is.int\n * Test if `value` is an integer.\n *\n * @param value to test\n * @return {Boolean} true if `value` is an integer, false otherwise\n * @api public\n */\n\nis.int = function (value) {\n  return is.number(value) && !isActualNaN(value) && value % 1 === 0;\n};\n\n/**\n * is.maximum\n * Test if `value` is greater than 'others' values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is greater than `others` values\n * @api public\n */\n\nis.maximum = function (value, others) {\n  if (isActualNaN(value)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.arraylike(others)) {\n    throw new TypeError('second argument must be array-like');\n  }\n  var len = others.length;\n\n  while (--len >= 0) {\n    if (value < others[len]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * is.minimum\n * Test if `value` is less than `others` values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is less than `others` values\n * @api public\n */\n\nis.minimum = function (value, others) {\n  if (isActualNaN(value)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.arraylike(others)) {\n    throw new TypeError('second argument must be array-like');\n  }\n  var len = others.length;\n\n  while (--len >= 0) {\n    if (value > others[len]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * is.nan\n * Test if `value` is not a number.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is not a number, false otherwise\n * @api public\n */\n\nis.nan = function (value) {\n  return !is.number(value) || value !== value;\n};\n\n/**\n * is.even\n * Test if `value` is an even number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an even number, false otherwise\n * @api public\n */\n\nis.even = function (value) {\n  return is.infinite(value) || (is.number(value) && value === value && value % 2 === 0);\n};\n\n/**\n * is.odd\n * Test if `value` is an odd number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an odd number, false otherwise\n * @api public\n */\n\nis.odd = function (value) {\n  return is.infinite(value) || (is.number(value) && value === value && value % 2 !== 0);\n};\n\n/**\n * is.ge\n * Test if `value` is greater than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */\n\nis.ge = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value >= other;\n};\n\n/**\n * is.gt\n * Test if `value` is greater than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */\n\nis.gt = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value > other;\n};\n\n/**\n * is.le\n * Test if `value` is less than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if 'value' is less than or equal to 'other'\n * @api public\n */\n\nis.le = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value <= other;\n};\n\n/**\n * is.lt\n * Test if `value` is less than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if `value` is less than `other`\n * @api public\n */\n\nis.lt = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value < other;\n};\n\n/**\n * is.within\n * Test if `value` is within `start` and `finish`.\n *\n * @param {Number} value value to test\n * @param {Number} start lower bound\n * @param {Number} finish upper bound\n * @return {Boolean} true if 'value' is is within 'start' and 'finish'\n * @api public\n */\nis.within = function (value, start, finish) {\n  if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {\n    throw new TypeError('all arguments must be numbers');\n  }\n  var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);\n  return isAnyInfinite || (value >= start && value <= finish);\n};\n\n/**\n * Test object.\n */\n\n/**\n * is.object\n * Test if `value` is an object.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is an object, false otherwise\n * @api public\n */\n\nis.object = function (value) {\n  return value && '[object Object]' === toString.call(value);\n};\n\n/**\n * is.hash\n * Test if `value` is a hash - a plain object literal.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a hash, false otherwise\n * @api public\n */\n\nis.hash = function (value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval;\n};\n\n/**\n * Test regexp.\n */\n\n/**\n * is.regexp\n * Test if `value` is a regular expression.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if `value` is a regexp, false otherwise\n * @api public\n */\n\nis.regexp = function (value) {\n  return '[object RegExp]' === toString.call(value);\n};\n\n/**\n * Test string.\n */\n\n/**\n * is.string\n * Test if `value` is a string.\n *\n * @param {Mixed} value value to test\n * @return {Boolean} true if 'value' is a string, false otherwise\n * @api public\n */\n\nis.string = function (value) {\n  return '[object String]' === toString.call(value);\n};\n\n"]},"metadata":{},"sourceType":"script"}