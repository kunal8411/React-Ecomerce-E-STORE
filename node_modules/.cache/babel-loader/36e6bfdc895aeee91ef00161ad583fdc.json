{"ast":null,"code":"import { call, put, takeLatest } from \"redux-saga/effects\";\nimport { fetchChatApi1, fetchChatApi2 } from \"../../api\";\nimport { WATCH_CHAT_MEMBERS, WATCH_CHAT_SUCCESS, SEND_MESSAGE_WATCHER, REPLY_MESSAGE_WATCHER, CREATE_CHAT_WATCHER } from \"../../redux/actionTypes\";\nimport { getMembersSuccess, sendMessageToChat, replyMessageToChat, getChats, getChatsSuccess, updateSelectedUser, createChat } from \"./action\";\n\nfunction* fetchChatMemberAsyn() {\n  const chatData = yield call(fetchChatApi1);\n  yield put(getMembersSuccess(chatData.data));\n}\n\nfunction* fetchChatAsyn() {\n  const chatData = yield call(fetchChatApi2);\n  const currentUserId = 0;\n  yield put(getChats(chatData.data));\n  const online = true;\n  const chats = chatData.data;\n  const chat = chats.data.filter(x => x.users.includes(currentUserId));\n  const selectedUser = chats.data[0].users.find(x => x !== currentUserId);\n  yield put(getChatsSuccess(chat, selectedUser, online));\n  yield put(updateSelectedUser(selectedUser, online));\n}\n\nfunction* sendMessageAsyn({\n  currentUserId,\n  selectedUserId,\n  messageInput,\n  chats,\n  online\n}) {\n  let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId));\n  const now = new Date();\n  const time = now.getHours() + \":\" + now.getMinutes();\n  const status = online;\n\n  if (chat) {\n    chat.messages.push({\n      sender: currentUserId,\n      time: time,\n      text: messageInput,\n      status: true\n    });\n    chat.lastMessageTime = time;\n    chat.online = status;\n    let chats_data = chats.filter(x => x.id !== chat.id);\n    chats_data.splice(0, 0, chat);\n    yield put(getChatsSuccess(chats, selectedUserId, online));\n  }\n\n  yield put(sendMessageToChat(currentUserId, selectedUserId, messageInput, chats, online));\n}\n\nfunction* replyByUserAsyn({\n  currentUserId,\n  selectedUserId,\n  replyMessage,\n  chats,\n  online\n}) {\n  let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId));\n  const now = new Date();\n  const time = now.getHours() + \":\" + now.getMinutes();\n  const status = online;\n\n  if (chat) {\n    chat.messages.push({\n      sender: selectedUserId,\n      time: time,\n      text: replyMessage,\n      status: true\n    });\n    chat.lastMessageTime = time;\n    chat.online = status;\n    let chats_data = chats.filter(x => x.id !== chat.id);\n    chats_data.splice(0, 0, chat);\n    yield put(getChatsSuccess(chats_data, selectedUserId, online));\n  }\n\n  yield put(replyMessageToChat(currentUserId, selectedUserId, replyMessage, chats, online));\n}\n\nfunction* createNewChatAsyn({\n  currentUserId,\n  selectedUserId,\n  chats\n}) {\n  yield put(createChat(currentUserId, selectedUserId, chats));\n  let conversation = {\n    id: chats.length + 1,\n    users: [currentUserId, selectedUserId],\n    lastMessageTime: \"-\",\n    messages: []\n  };\n  chats.splice(0, 0, conversation);\n  yield put(getChatsSuccess(chats, selectedUserId));\n}\n\nexport function* WatcherChatApp() {\n  yield takeLatest(WATCH_CHAT_MEMBERS, fetchChatMemberAsyn);\n  yield takeLatest(WATCH_CHAT_SUCCESS, fetchChatAsyn);\n  yield takeLatest(SEND_MESSAGE_WATCHER, sendMessageAsyn);\n  yield takeLatest(REPLY_MESSAGE_WATCHER, replyByUserAsyn);\n  yield takeLatest(CREATE_CHAT_WATCHER, createNewChatAsyn);\n}","map":{"version":3,"sources":["/home/kunal/Kunal/THEMES/theme/src/redux/chat/index.js"],"names":["call","put","takeLatest","fetchChatApi1","fetchChatApi2","WATCH_CHAT_MEMBERS","WATCH_CHAT_SUCCESS","SEND_MESSAGE_WATCHER","REPLY_MESSAGE_WATCHER","CREATE_CHAT_WATCHER","getMembersSuccess","sendMessageToChat","replyMessageToChat","getChats","getChatsSuccess","updateSelectedUser","createChat","fetchChatMemberAsyn","chatData","data","fetchChatAsyn","currentUserId","online","chats","chat","filter","x","users","includes","selectedUser","find","sendMessageAsyn","selectedUserId","messageInput","now","Date","time","getHours","getMinutes","status","messages","push","sender","text","lastMessageTime","chats_data","id","splice","replyByUserAsyn","replyMessage","createNewChatAsyn","conversation","length","WatcherChatApp"],"mappings":"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","sourcesContent":["import {call,put, takeLatest} from \"redux-saga/effects\";\nimport { fetchChatApi1,fetchChatApi2 } from \"../../api\";\nimport { WATCH_CHAT_MEMBERS,WATCH_CHAT_SUCCESS,SEND_MESSAGE_WATCHER,REPLY_MESSAGE_WATCHER,CREATE_CHAT_WATCHER } from \"../../redux/actionTypes\";\nimport { getMembersSuccess,sendMessageToChat,replyMessageToChat,getChats,getChatsSuccess,updateSelectedUser,createChat} from \"./action\";\n\n\nfunction* fetchChatMemberAsyn() {\n    const chatData = yield call(fetchChatApi1);\n    yield put(getMembersSuccess(chatData.data));\n}\n\nfunction* fetchChatAsyn() {\n\n    const chatData = yield call(fetchChatApi2);\n    const currentUserId = 0;\n    yield put(getChats(chatData.data));\n    const online = true;\n    const chats = chatData.data;\n    const chat = chats.data.filter(x => x.users.includes(currentUserId));\n    const selectedUser = chats.data[0].users.find(x => x !== currentUserId);\n    yield put(getChatsSuccess(chat,selectedUser,online))\n    yield put(updateSelectedUser(selectedUser,online))\n}\n\nfunction* sendMessageAsyn({currentUserId, selectedUserId, messageInput, chats, online}) {\n\n     let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId))\n     const now = new Date();\n     const time =  now.getHours() + \":\" + now.getMinutes();\n     const status=online\n     if (chat) {\n         chat.messages.push({\n             sender: currentUserId,\n             time: time,\n             text: messageInput,\n             status:true\n         });\n         chat.lastMessageTime = time;\n         chat.online = status;\n         \n         let chats_data = (chats.filter(x => x.id !== chat.id));\n         chats_data.splice(0, 0, chat)\n         yield put(getChatsSuccess(chats,selectedUserId,online))  \n    }\n    yield put(sendMessageToChat(currentUserId,selectedUserId,messageInput,chats,online))  \n}\n\nfunction* replyByUserAsyn({currentUserId, selectedUserId, replyMessage, chats, online}) {\n  \n    let chat = chats.find(x => x.users.includes(currentUserId) && x.users.includes(selectedUserId))\n    const now = new Date();\n    const time =  now.getHours() + \":\" + now.getMinutes();\n    const status= online\n    if (chat) {\n        chat.messages.push({\n            sender: selectedUserId,\n            time: time,\n            text: replyMessage,\n            status:true\n        });\n        chat.lastMessageTime = time;\n        chat.online = status;\n        let chats_data = (chats.filter(x => x.id !== chat.id));\n        chats_data.splice(0, 0, chat)\n\n        yield put(getChatsSuccess(chats_data,selectedUserId,online));\n    }\n    yield put(replyMessageToChat(currentUserId, selectedUserId, replyMessage, chats, online));\n}\n\nfunction* createNewChatAsyn({currentUserId, selectedUserId, chats}) {\n\n    yield put(createChat(currentUserId, selectedUserId, chats))\n    let conversation = {\n        id: chats.length + 1,\n        users: [currentUserId, selectedUserId],\n        lastMessageTime: \"-\",\n        messages: []\n    };\n    chats.splice(0, 0, conversation)\n    yield put(getChatsSuccess(chats,selectedUserId))\n}\n\nexport function* WatcherChatApp() {\n    yield takeLatest(WATCH_CHAT_MEMBERS,fetchChatMemberAsyn)\n    yield takeLatest(WATCH_CHAT_SUCCESS,fetchChatAsyn)\n    yield takeLatest(SEND_MESSAGE_WATCHER,sendMessageAsyn)\n    yield takeLatest(REPLY_MESSAGE_WATCHER,replyByUserAsyn)\n    yield takeLatest(CREATE_CHAT_WATCHER, createNewChatAsyn)\n}\n\n\n"]},"metadata":{},"sourceType":"module"}